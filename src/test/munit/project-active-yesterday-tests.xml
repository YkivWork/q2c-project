<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:newly-active-project.xml"/>
        <spring:import resource="classpath:aria.xml"/>
        <spring:import resource="classpath:dso.xml"/>
        <spring:import resource="classpath:dso-auth.xml"/>
        <spring:import resource="classpath:sfdc-lookups.xml"/>
        <spring:import resource="classpath:error-handling.xml"/>
        <spring:import resource="classpath:oracle.xml"/>
        <spring:import resource="classpath:oracle-auth.xml"/>
        <spring:import resource="classpath:oracle-lookups.xml"/>
        <spring:import resource="classpath:mdr-xrefs.xml"/>
        <spring:import resource="classpath:mdr-upserts.xml"/>
        <spring:import resource="classpath:globals.xml"/>
    </spring:beans>

    <munit:test name="processNewlyActiveProjectCallsAriaWithCorrectIds" description="Test">
        <set-payload value="#[getResource('project-active-yesterday/mdr-project-response.json').asString()]" mimeType="application/json"/>
        <set-payload value="#[dw('payload', 'application/java')]"/>
        <mock:when messageProcessor="mule:flow" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="getXRefForSFDCProjectFlow"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>

        <set-payload value="#[getResource('project-active-yesterday/mdr-org-response.json').asString()]" mimeType="application/json"/>
        <set-payload value="#[dw('payload', 'application/java')]"/>
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('getXRefForOrgFlow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>

        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="config-ref" whereValue="ariaRequestConfiguration"/>
            </mock:with-attributes>
            <mock:then-return payload=" "/>
        </mock:when>

        <mock:spy messageProcessor="http:request" doc:name="Spy">
            <mock:with-attributes>
                <mock:with-attribute name="config-ref" whereValue="ariaRequestConfiguration"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals message="Aria Account # is invalid" expectedValue="1704915" actualValue="#[xpath3('/soap:Envelope/soap:Body/aria:update_acct_plan_status_m/acct_no', payload)]" doc:name="Assert Equals"/>
                <munit:assert-on-equals message="Aria MPI is invalid" expectedValue="2301644" actualValue="#[xpath3('/soap:Envelope/soap:Body/aria:update_acct_plan_status_m/client_plan_instance_id', payload)]" doc:name="Assert Equals"/>
            </mock:assertions-before-call>
        </mock:spy>

        <set-payload value="#[getResource('sfdc-query-response.json').asString()]" mimeType="application/json" doc:name="Set Payload"/>
        <set-payload value="#[dw(payload, 'application/java')]" doc:name="Set Payload"/>
        <set-variable variableName="theProject" value="#[payload]"/>

        <flow-ref name="processNewlyActiveProject" doc:name="processNewlyActiveProject"/>

        <mock:verify-call messageProcessor="http:request" times="1" doc:name="Verify">
            <mock:with-attributes>
                <mock:with-attribute name="config-ref" whereValue="ariaRequestConfiguration"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>

</mule>
