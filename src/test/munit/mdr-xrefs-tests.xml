<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>

    <spring:beans>
        <spring:import resource="classpath:mdr-xrefs.xml"/>
        <spring:import resource="classpath:globals.xml"/>
    </spring:beans>

    <munit:test name="getXRefForSFDCProjectFlowTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[getResource('mdr-getcrossreference-response.json').asString()]" mimeType="application/json"/>

        </mock:when>
        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="getXRefForSFDCProjectFlow" doc:name="getXRefForSFDCProjectFlow"/>

        
        <munit:assert-on-equals message="getXRefForSFDCProjectFlow's payload should be a list" expectedValue="a27c0000005RJZjAAO" actualValue="#[payload[0].IdentifierValue]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="addBillCoToSfProjXRefFlowTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="addBillCoToSfProjXRefFlow" doc:name="addBillCoToSfProjXRefFlow"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="addBillAddrToSfProjXRefFlowTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="addBillAddrToSfProjXRefFlow" doc:name="addBillAddrToSfProjXRefFlow"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="addOraAcctToSfProjXRefFlowTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="addOraAcctToSfProjXRefFlow" doc:name="addOraAcctToSfProjXRefFlow"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="addOraSiteToSfProjXRefFlowTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="addOraSiteToSfProjXRefFlow" doc:name="addOraSiteToSfProjXRefFlow"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="addAriaAcctToSfProjXRefFlowTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="addAriaAcctToSfProjXRefFlow" doc:name="addAriaAcctToSfProjXRefFlow"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="createORGADDR:ORA_SITETest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="createORGADDR:ORA_SITE" doc:name="createORGADDR:ORA_SITE"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="createORGADDR:ORA_ACCTTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="createORGADDR:ORA_ACCT" doc:name="createORGADDR:ORA_ACCT"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="createORGADDR:SF_BILLCOTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="createORGADDR:SF_BILLCO" doc:name="createORGADDR:SF_BILLCO"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="createORG:ORA_ACCTTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="createORG:ORA_ACCT" doc:name="createORG:ORA_ACCT"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>

    <munit:test name="createPROJ:DS1_PROJTest" description="Test">
        <mock:when messageProcessor="http:request" doc:name="Mock">
            <mock:then-return payload="#[NullPayload.getInstance()]"/>
        </mock:when>

        <set-variable variableName="theProject" value="{ &quot;projectSfdcId&quot; :  &quot;SF1&quot;}" mimeType="application/json" doc:name="Variable"/>

        <flow-ref name="createPROJ:DS1_PROJ" doc:name="createPROJ:DS1_PROJ"/>

        <munit:assert-on-equals message="payload should be empty" expectedValue="" actualValue="#[payload]" doc:name="Assert Equals"/>
    </munit:test>
</mule>
